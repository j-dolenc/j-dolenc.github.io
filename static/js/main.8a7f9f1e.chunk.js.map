{"version":3,"sources":["Gradnik.js","App.js","reportWebVitals.js","index.js"],"names":["Gradnik","props","useState","count","setCount","handleClick","change","console","log","onClick","dolf","dol","gorf","gor","App","className","num","Math","sqrt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAyBeA,MAvBf,SAAiBC,GAAQ,IAAD,EACKC,mBAAS,GADd,mBACbC,EADa,KACPC,EADO,KAGpB,SAASC,EAAYC,GACjBF,EAASE,EAAOH,IAChBI,QAAQC,IAAIP,GAGhB,OACI,8BACI,gCACI,wBAAQQ,QAAS,kBAAIJ,EAAYJ,EAAMS,OAAvC,SAA+CT,EAAMU,MACrD,wBAAQF,QAAS,kBAAIJ,EAAYJ,EAAMW,OAAvC,SAA+CX,EAAMY,MACrD,4BAAIV,UCKLW,MAff,WAOE,OACE,sBAAKC,UAAU,MAAf,UACI,cAAC,EAAD,CAASF,IAAI,WAAWF,IAAI,aAAaC,KAAM,SAACI,GAAD,OAAQA,EAAI,GAAGN,KARlE,SAAcM,GACV,OAAOA,EAAI,KAQX,cAAC,EAAD,CAASH,IAAI,SAASF,IAAI,OAAOC,KAAM,SAACI,GAAD,OAAQA,EAAIA,GAAKN,KAAM,SAACM,GAAD,OAAQC,KAAKC,KAAKF,UCHzEG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.8a7f9f1e.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nfunction Gradnik(props) {\r\n    const [count,setCount] = useState(2);\r\n\r\n    function handleClick(change){\r\n        setCount(change(count));\r\n        console.log(props);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div >\r\n                <button onClick={()=>handleClick(props.dolf)}>{props.dol}</button>\r\n                <button onClick={()=>handleClick(props.gorf)}>{props.gor}</button>\r\n                <p>{count}</p>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Gradnik;\r\n\r\n","\nimport './App.css';\n\nimport Gradnik from './Gradnik.js';\n\nfunction App() {\n    function dolf(num){\n        return num-2;\n    }\n    function gorf(num){\n        return num+2;\n    }\n  return (\n    <div className=\"App\">\n        <Gradnik gor=\"count up\" dol=\"count down\" gorf={(num)=> num+2} dolf={dolf}/>\n        <Gradnik gor=\"square\" dol=\"root\" gorf={(num)=> num*num} dolf={(num)=> Math.sqrt(num)}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}